#!/usr/bin/env python2

from rflib import *
import binascii
import time
import datetime
import crccheck
from openomni import Packet

def flip_bytes(data):
	"""flip_bytes inverts bytes"""
	bytes = map(lambda x: ord(x) ^ 0xff, data)
	return bytearray(bytes).__str__()

def quick_setup(device, bitrate=40625, check=True):
	"""quick_setup is used to setup rfcat to quickly decode omnipod signals"""
	device.setFreq(433.91e6)
	device.setMdmModulation(MOD_2FSK)
  device.setMdmDeviatn(52735)
	device.setPktPQT(1)
	device.setMdmSyncMode(SYNCM_CARRIER_16_of_16)
	device.setMdmSyncWord(0x54c3)
	device.makePktFLEN(50)
	device.setEnableMdmManchester(True)
	device.setMdmDRate(bitrate)
	device.setMdmChanSpc(64000)
	device.setRFRegister(0xdf18, 0x70)
  device.setMaxPower()

	preamble ="545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454"
  preambleStr = ''.join([preamble,preamble,preamble,preamble,preamble,preamble,preamble])

	podAddr = raw_input('POD Address: ')
	while not keystop():
		try:
      op = raw_input('Operation (s=Status, t=Temp Basal): ')
			if op == 's':
				millis = int(round(time.time() * 1000))
				seqNum = 0xE0 + (millis & 0x1F)
				print "seqNum: %s %s %s" % (seqNum, hex(seqNum), chr(seqNum).encode('hex'))
				txpkt = podAddr + chr(seqNum).encode('hex') + podAddr + '0c030e0100033b'
        print "txpkt: %s" % (txpkt)
				print "crc: %s" % (crccheck.crc.Crc8.calc(bytearray(txpkt.decode('hex'))))
				crcChk = crccheck.crc.Crc8()
				crcChk.process(bytearray(txpkt.decode('hex')))
				print "crc: %s, %s" % (crcChk.final(), crcChk.finalhex())
				txpkt = txpkt + crcChk.finalhex()
        print "txpkt: %s" % (txpkt)
				txpkt = txpkt.decode('hex')
        print "txpkt: %s" % (txpkt)
				txpkt = flip_bytes(txpkt)
				print "txpkt: %s" % (txpkt)
				txpkt = preambleStr.decode('hex') + 'c3'.decode('hex') + txpkt
        print "txpkt: %s" % (txpkt)
				device.makePktFLEN(len(txpkt))
        device.RFxmit(txpkt)
        device.makePktFLEN(50)
				pkt,ts = device.RFrecv(timeout=1000)
        pkt = flip_bytes(pkt)
				rcv_time = datetime.datetime.now()

			packet = Packet(pkt)
			if packet.is_valid():
				#print packet.data.encode('hex')
				print "%s %s" % (rcv_time.isoformat(), packet)
				seqNum = ord(packet.data[4:5]) + 1
				#print "seqNum: %s %s" % (seqNum, seqNum.encode('hex'))
				print "seqNum: %s" % (seqNum)
				seqMask = 0x3F
				print "seqNum: %s" % (seqNum & seqMask)
				seqNum = seqMask + (seqNum & seqMask)
				print "seqNum: %s %s" % (seqNum, hex(seqNum)[2:])
				ackPkt = packet.data[:4] + hex(seqNum)[2:].decode('hex') + packet.data[5:9]
				print "ackPkt: %s" % (ackPkt)
				print "crc: %s" % (crccheck.crc.Crc8.calc(bytearray(ackPkt)))
				crcChk = crccheck.crc.Crc8()
				crcChk.process(bytearray(ackPkt))
				print "crc: %s, %s" % (crcChk.final(), crcChk.finalhex())
				strCrc = crcChk.finalhex()
				ackPkt = ackPkt + strCrc.decode('hex')
	      print "ackPkt: %s" % (ackPkt.encode('hex'))
				ackPkt = flip_bytes(ackPkt)
        print "ackPkt: %s" % (ackPkt)
				device.makePktFLEN(20)
				time.sleep(0.2)
				device.RFxmit(ackPkt)
				device.RFxmit(ackPkt)
				device.RFxmit(ackPkt)
				device.RFxmit(ackPkt)
				time.sleep(0.1)
				device.makePktFLEN(255)
				loopCnt = 0
				while loopCnt < 5:
					pkt,ts = device.RFrecv(timeout=250)
					if pkt != None:
						device.RFxmit(ackPkt)
					loopCnt += 1
				device.makePktFLEN(50)

		except ChipconUsbTimeoutException:
			time.sleep(0.5)


	sys.stdin.read(1)

def main(options=None):
	d = RfCat(0, debug=False)
	quick_setup(d)


if __name__ == '__main__':
	main()
